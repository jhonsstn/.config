"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateFromDeprecatedMessageSwitch = exports.updateMessageSwitch = exports.Messages = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const Colors_1 = require("../../api/constants/Colors");
const featureFlag_1 = require("../../api/modules/featureFlag");
exports.Messages = {
    USE_SUCCESS: (workspace, account) => `${chalk_1.default.bold('Workspace change:')} You are now using the workspace ${Colors_1.ColorifyConstants.ID(workspace)} on account ${Colors_1.ColorifyConstants.ID(account)}.\n`,
    CREATE_MISSING_WORKSPACE_NAME: () => `You need to pick a name for the new workspace. Run ${Colors_1.ColorifyConstants.ID('vtex workspace create [WORKSPACENAME]')}. You can name it using your name with a number, for example ${Colors_1.ColorifyConstants.ID(`vtex workspace create johndoe01`)}`,
    UPDATE_TOOLBELT: () => `To update, you must use the same method you used to install. As the following examples:` +
        `\n\n` +
        `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`yarn`)}, update running ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`yarn global add vtex`)}.` +
        `\n\n` +
        `• If you installed using our new method there is in alpha-version, update running ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`vtex autoupdate`)}.\n`,
    UPDATE_TOOLBELT_NPM: () => `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`yarn`)}, update running ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`yarn global add vtex`)}.`,
    UPDATE_TOOLBELT_BREW: () => `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`brew`)}, update running ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`brew upgrade vtex/vtex`)}.`,
    UPDATE_TOOLBELT_STANDALONE: () => `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`AWS Standalone`)}, update running ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`vtex autoupdate`)}.`,
    UPDATE_TOOLBELT_CHOCOLATEY: () => `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`chocolatey`)}, update running ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`choco upgrade vtex`)}.`,
    UPDATE_FROM_DEPRECATED_BREW: () => `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`brew`)}, update running ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`brew unlink vtex && brew install vtex/vtex`)}.`,
    UPDATE_FROM_DEPRECATED_STANDALONE: () => `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`AWS Standalone`)}, update running:
    ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`curl https://vtex-toolbelt-test.s3.us-east-2.amazonaws.com/uninstall.sh | sh`)}
    ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`curl https://vtex-toolbelt-test.s3.us-east-2.amazonaws.com/install.sh | sh`)}`,
    UPDATE_FROM_DEPRECATED_CHOCOLATEY: () => `• If you installed using ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`chocolatey`)}, update running:
    ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`choco uninstall vtex`)}.
    ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`choco install vtex`)}.`,
    INIT_HELLO_EXPLANATION: () => `Hello! I will help you generate basic files and folders for your app.`,
    INIT_START_DEVELOPING: (folder) => `Run ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF(`cd ${folder}`)} and ${Colors_1.ColorifyConstants.COMMAND_OR_VTEX_REF('vtex link')} to start developing!`,
    PROMPT_CONFIRM_NEW_FOLDER: (folder) => `You are about to create the new folder ${folder}. Do you want to continue?`,
    DEBUG_DOWNLOAD_TEMPLATE_URL: (url) => `We will try to download the template app from this URL: ${url}`,
    DEBUG_PROMPT_APP_INFO: () => `Prompting for app info`,
    ERROR_COULD_NOT_DETERMINE_DEFAULT_BRANCH: (org, repo) => `We could not determine the default branch for repo ${org}/${repo}. Please try again.`,
};
function updateMessageSwitch() {
    const allMessages = [];
    allMessages.push(exports.Messages.UPDATE_TOOLBELT_NPM());
    const flagOSVersionMessage = featureFlag_1.FeatureFlag.getSingleton().getFeatureFlagInfo('FEATURE_FLAG_OS_VERSION_MESSAGE');
    if (flagOSVersionMessage) {
        switch (process.platform) {
            case 'darwin':
                allMessages.push(exports.Messages.UPDATE_TOOLBELT_BREW());
                break;
            case 'linux':
                allMessages.push(exports.Messages.UPDATE_TOOLBELT_STANDALONE());
                break;
            case 'win32':
                allMessages.push(exports.Messages.UPDATE_TOOLBELT_CHOCOLATEY());
                break;
            default:
                break;
        }
    }
    return allMessages;
}
exports.updateMessageSwitch = updateMessageSwitch;
function updateFromDeprecatedMessageSwitch() {
    const allMessages = [];
    allMessages.push(exports.Messages.UPDATE_TOOLBELT_NPM());
    const flagOSVersionMessage = featureFlag_1.FeatureFlag.getSingleton().getFeatureFlagInfo('FEATURE_FLAG_OS_VERSION_MESSAGE');
    if (flagOSVersionMessage) {
        switch (process.platform) {
            case 'darwin':
                allMessages.push(exports.Messages.UPDATE_FROM_DEPRECATED_BREW());
                break;
            case 'linux':
                allMessages.push(exports.Messages.UPDATE_FROM_DEPRECATED_STANDALONE());
                break;
            case 'win32':
                allMessages.push(exports.Messages.UPDATE_FROM_DEPRECATED_CHOCOLATEY());
                break;
            default:
                break;
        }
    }
    return allMessages;
}
exports.updateFromDeprecatedMessageSwitch = updateFromDeprecatedMessageSwitch;
