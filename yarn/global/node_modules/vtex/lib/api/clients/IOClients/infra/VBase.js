"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VBase = void 0;
const api_1 = require("@vtex/api");
const IOClientFactory_1 = require("../IOClientFactory");
const routes = {
    Bucket: (bucket) => `/buckets/${bucket}`,
    File: (bucket, path) => `${routes.Bucket(bucket)}/userData/files/${path}`,
};
class VBase extends api_1.InfraClient {
    constructor(ctx, opts) {
        super('vbase@0.x', ctx, {
            ...opts,
            headers: {
                'X-Vtex-Detect-Conflicts': 'true',
                Authorization: ctx.authToken,
            },
        });
        this.checkForConflicts = async () => {
            let status;
            try {
                const response = await this.http.get(routes.File('vtex.pages-graphql', 'store/content.json'), {
                    metric: 'vbase-conflict',
                });
                status = response.status;
            }
            catch (error) {
                status = error.response && error.response.status;
            }
            return status === 409;
        };
    }
    static createClient(customContext = {}, customOptions = {}) {
        return IOClientFactory_1.IOClientFactory.createClient(VBase, customContext, customOptions);
    }
}
exports.VBase = VBase;
