import R from 'ramda';
import { ManifestEditor } from '../manifest';
export declare const sleepSec: (sec: number) => Promise<unknown>;
export declare const workspaceMasterMessage: string;
export declare const workspaceProductionMessage: (workspace: any) => string;
export declare const promptWorkspaceMaster: (account: any) => Promise<boolean>;
export declare const validateAppAction: (operation: string, app?: any) => Promise<boolean>;
export declare const wildVersionByMajor: (v1: string) => string;
export declare const extractVersionFromId: (v1: string) => string;
export declare const pickLatestVersion: (versions: string[]) => string;
export declare const handleError: R.CurriedFunction2<string, any, Promise<never>>;
export declare const appLatestVersion: (app: string, version?: string) => Promise<string | never>;
export declare const appLatestMajor: (app: string) => Promise<string | never>;
export declare const appIdFromRegistry: (app: string, majorLocator: string) => Promise<string>;
export declare const getVendorFromApp: (app: string) => string;
export declare function checkBuilderHubMessage(cliRoute: string): Promise<any>;
export declare function showBuilderHubMessage(message: string, showPrompt: boolean, manifest: ManifestEditor): Promise<void>;
export declare const resolveAppId: (appName: string, appVersion: string) => Promise<string>;
export declare const isLinked: (object: import("@vtex/api").AppManifest) => boolean;
export declare const yarnPath: string;
export declare const formatNano: (nanoseconds: number) => string;
export declare const matchedDepsDiffTable: (title1: string, title2: string, deps1: string[], deps2: string[]) => any;
export declare const continueAfterReactTermsAndConditions: (manifest: ManifestEditor) => Promise<boolean>;
