"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const Messages_1 = require("../lib/constants/Messages");
const vtex_1 = require("vtex");
const switchToVendorMessage = (vendor) => {
    return `You are trying to deploy this app in an account that differs from the indicated vendor. Do you want to deploy in account ${chalk_1.default.blue(vendor)}?`;
};
const promptDeploy = (app) => vtex_1.promptConfirm(`Are you sure you want to deploy app ${app}`);
const deployRelease = async (app) => {
    const { vendor, name, version } = vtex_1.parseLocator(app);
    const session = vtex_1.SessionManager.getSingleton();
    if (vendor !== session.account) {
        const canSwitchToVendor = await vtex_1.promptConfirm(switchToVendorMessage(vendor));
        if (!canSwitchToVendor) {
            return false;
        }
        await vtex_1.switchAccount(vendor, {});
    }
    const context = { account: vendor, workspace: 'master', authToken: session.token };
    const registry = vtex_1.createRegistryClient(context);
    await registry.validateApp(`${vendor}.${name}`, version);
    return true;
};
// @ts-ignore
const prepareDeploy = async (app, originalAccount, originalWorkspace) => {
    var _a;
    app = vtex_1.ManifestValidator.validateApp(app);
    try {
        vtex_1.logger.debug(Messages_1.Messages.DEPLOY_START(app));
        const deployed = await deployRelease(app);
        if (deployed) {
            vtex_1.logger.info(Messages_1.Messages.DEPLOY_SUCCESS(app));
        }
    }
    catch (e) {
        const data = (_a = e.response) === null || _a === void 0 ? void 0 : _a.data;
        const code = data === null || data === void 0 ? void 0 : data.code;
        if (code === 'app_is_not_rc') {
            vtex_1.logger.error(Messages_1.Messages.DEPLOY_ALREADY_ERROR(app));
        }
        else if (data === null || data === void 0 ? void 0 : data.message) {
            vtex_1.logger.error(data.message);
        }
        else {
            await vtex_1.returnToPreviousAccount({ previousAccount: originalAccount, previousWorkspace: originalWorkspace });
            throw e;
        }
    }
    await vtex_1.returnToPreviousAccount({ previousAccount: originalAccount, previousWorkspace: originalWorkspace });
};
// @ts-ignore
exports.default = async (optionalApp, options) => {
    const preConfirm = options.y || options.yes;
    const { account: originalAccount, workspace: originalWorkspace } = vtex_1.SessionManager.getSingleton();
    const app = optionalApp || (await vtex_1.ManifestEditor.getManifestEditor()).appLocator;
    if (!preConfirm && !(await promptDeploy(app))) {
        return;
    }
    vtex_1.logger.debug(`Deploying app ${app}`);
    return prepareDeploy(app, originalAccount, originalWorkspace);
};
