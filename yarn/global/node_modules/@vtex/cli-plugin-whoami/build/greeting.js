"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.greeting = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const vtex_1 = require("vtex");
const workspaceState = (meta) => (meta.production ? 'production' : 'dev');
const getWorkspaceState = async (account, workspace) => {
    try {
        const workspaces = vtex_1.createWorkspacesClient();
        const meta = await workspaces.get(account, workspace);
        return `${workspaceState(meta)} `;
    }
    catch (err) {
        vtex_1.logger.debug(`Unable to fetch workspace state`);
        vtex_1.logger.debug(err.message);
        // @ts-ignore
        return undefined;
    }
};
exports.greeting = async () => {
    const { account, userLogged, workspace } = vtex_1.SessionManager.getSingleton();
    if (account && userLogged && workspace) {
        let loggedMessage = 'Logged into';
        let state = await getWorkspaceState(account, workspace);
        if (!state) {
            loggedMessage = `${chalk_1.default.hex(vtex_1.COLORS.YELLOW)('Not logged in')}. Previously logged into`;
            state = '';
        }
        return [
            `${loggedMessage} ${vtex_1.ColorifyConstants.ID(account)} as ${vtex_1.ColorifyConstants.ID(userLogged)} at ${chalk_1.default.hex(vtex_1.COLORS.YELLOW)(state)}workspace ${vtex_1.ColorifyConstants.ID(workspace)}`,
        ];
    }
    return [
        `${chalk_1.default.bold('Welcome to VTEX IO')}`,
        `Log in by running ${vtex_1.ColorifyConstants.COMMAND_OR_VTEX_REF('vtex login')} ${vtex_1.ColorifyConstants.ID('<account-name>')}`,
    ];
};
