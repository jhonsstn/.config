"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const plugins_1 = tslib_1.__importDefault(require("../../modules/plugins"));
const vtex_1 = require("vtex");
const chalk = require("chalk");
const vtex_2 = require("vtex");
class PluginsSource extends command_1.Command {
    constructor() {
        super(...arguments);
        this.plugins = new plugins_1.default(this.config);
    }
    async run() {
        const remoteCommands = vtex_1.FeatureFlag.getSingleton()
            .getFeatureFlagInfo("REMOTE_COMMANDS");
        let allPlugins = this.config.plugins;
        allPlugins = allPlugins.filter((p) => p.type !== "core" &&
            p.type !== "dev" &&
            p.name.startsWith("@vtex/cli-plugin-"));
        allPlugins = allPlugins.map((p) => {
            p.name = p.name.replace("@vtex/cli-plugin-", "");
            return p;
        });
        const plugins = allPlugins.map((p) => {
            return p.name;
        });
        for (const command of remoteCommands) {
            if (plugins.includes(command.name)) {
                command.name = `${chalk.green(command.name)}`;
            }
            console.log(`â€¢ ${command.name} - ${command.description}`);
        }
    }
}
exports.default = PluginsSource;
PluginsSource.description = `Lists all plugins supported by ${vtex_2.ColorifyConstants.ID("VTEX")}.`;
PluginsSource.usage = "plugins source PLUGIN";
PluginsSource.examples = [
    `${vtex_2.ColorifyConstants.COMMAND_OR_VTEX_REF("vtex plugins source")} myplugin`,
];
PluginsSource.args = [
    { name: "path", description: "Plugin path.", required: true, default: "." },
];
PluginsSource.flags = {
    help: command_1.flags.help({ char: "h" }),
    verbose: command_1.flags.boolean({ char: "v" }),
};
