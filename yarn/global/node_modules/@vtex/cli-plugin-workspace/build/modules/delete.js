"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteWorkspaces = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const ramda_1 = require("ramda");
const vtex_1 = require("vtex");
const promptWorkspaceDeletion = (names) => vtex_1.promptConfirm(`Are you sure you want to delete workspace${names.length > 1 ? 's' : ''} ${chalk_1.default.green(names.join(', '))}?`, true);
exports.deleteWorkspaces = async (workspacesClient, account, names = []) => {
    if (names.length === 0) {
        return [];
    }
    const [name] = names;
    const decNames = ramda_1.tail(names);
    vtex_1.logger.debug('Starting to delete workspace', name);
    try {
        await workspacesClient.delete(account, name);
        vtex_1.logger.info(`Workspace ${chalk_1.default.green(name)} deleted ${chalk_1.default.green('successfully')}`);
        return ramda_1.flatten([name, await exports.deleteWorkspaces(workspacesClient, account, decNames)]);
    }
    catch (err) {
        vtex_1.logger.warn(`Workspace ${chalk_1.default.green(name)} was ${chalk_1.default.red('not')} deleted`);
        vtex_1.logger.error(`Error ${err.response.status}: ${err.response.statusText}. ${err.response.data.message}`);
        return exports.deleteWorkspaces(workspacesClient, account, decNames);
    }
};
exports.default = async (names, options) => {
    const preConfirm = options.yes;
    const { force } = options;
    const { account, workspace } = vtex_1.SessionManager.getSingleton();
    vtex_1.logger.debug(`Deleting workspace${names.length > 1 ? 's' : ''}:`, names.join(', '));
    if (!force && ramda_1.contains(workspace, names)) {
        return vtex_1.logger.error(`You are currently using the workspace ${chalk_1.default.green(workspace)}, please change your workspace before deleting`);
    }
    if (!preConfirm && !(await promptWorkspaceDeletion(names))) {
        return;
    }
    const workspacesClient = vtex_1.createWorkspacesClient();
    const deleted = await exports.deleteWorkspaces(workspacesClient, account, names);
    if (ramda_1.contains(workspace, deleted)) {
        vtex_1.logger.warn(`The workspace you were using was deleted`);
        return vtex_1.workspaceUse('master');
    }
};
