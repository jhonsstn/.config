"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const vtex_1 = require("vtex");
class WorkspaceReset extends vtex_1.CustomCommand {
    async run() {
        const { args: { workspaceName }, flags: { yes, production }, } = this.parse(WorkspaceReset);
        await vtex_1.workspaceReset(workspaceName, { yes, production });
    }
}
exports.default = WorkspaceReset;
WorkspaceReset.description = `Cleans all configurations of a ${vtex_1.ColorifyConstants.ID('workspace')} and recreates it with the configurations from master. If not specified which ${vtex_1.ColorifyConstants.ID('workspace')}, it defaults to the current one.`;
WorkspaceReset.examples = [
    `${vtex_1.ColorifyConstants.COMMAND_OR_VTEX_REF('vtex workspace reset')}`,
    `${vtex_1.ColorifyConstants.COMMAND_OR_VTEX_REF('vtex workspace reset')} workspaceName`,
];
WorkspaceReset.flags = {
    ...vtex_1.CustomCommand.globalFlags,
    production: command_1.flags.boolean({
        char: 'p',
        description: `Recreates the ${vtex_1.ColorifyConstants.ID('workspace')} as a production one.`,
        default: false,
    }),
    yes: command_1.flags.boolean({ char: 'y', description: 'Answers yes to all prompts.' }),
};
WorkspaceReset.args = [
    {
        name: 'workspaceName',
        required: false,
        description: `Name of the ${vtex_1.ColorifyConstants.ID('workspace')} to reset.`,
    },
];
