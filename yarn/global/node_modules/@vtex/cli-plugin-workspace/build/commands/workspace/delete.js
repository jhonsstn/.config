"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const delete_1 = tslib_1.__importDefault(require("../../modules/delete"));
const vtex_1 = require("vtex");
class WorkspaceDelete extends vtex_1.CustomCommand {
    async run() {
        const { raw, flags: { force, yes }, } = this.parse(WorkspaceDelete);
        const names = this.getAllArgs(raw);
        await delete_1.default(names, { yes, force });
    }
}
exports.default = WorkspaceDelete;
WorkspaceDelete.description = `Deletes one or many ${vtex_1.ColorifyConstants.ID('workspaces')} from the current ${vtex_1.ColorifyConstants.ID('account')}.`;
WorkspaceDelete.examples = [
    `${vtex_1.ColorifyConstants.COMMAND_OR_VTEX_REF('vtex workspace delete')} workspaceName`,
    `${vtex_1.ColorifyConstants.COMMAND_OR_VTEX_REF('vtex workspace delete')} workspaceName1 workspaceName2`,
];
WorkspaceDelete.flags = {
    ...vtex_1.CustomCommand.globalFlags,
    force: command_1.flags.boolean({
        char: 'f',
        description: `Deletes the specified ${vtex_1.ColorifyConstants.ID('workspace')} even if it is currently in use.`,
    }),
    yes: command_1.flags.boolean({ char: 'y', description: 'Answers yes to all prompts.' }),
};
WorkspaceDelete.strict = false;
WorkspaceDelete.args = [
    { name: 'workspace1', required: true, description: `Name of the ${vtex_1.ColorifyConstants.ID('workspace')} to delete.` },
    {
        name: 'ithWorkspace',
        required: false,
        multiple: true,
        description: `Name of the multiple ${vtex_1.ColorifyConstants.ID('workspaces')} to delete.`,
    },
];
